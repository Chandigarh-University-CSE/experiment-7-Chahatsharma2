# MAXIMUM NUMBER OF TASKS YOU CAN ASSIGN
CODE: 
import java.util.*;

class Solution {
    public boolean canAssign(int[] tasks, int[] workers, int pills, int strength, int mid) {
        TreeMap<Integer, Integer> availableWorkers = new TreeMap<>();

        for (int i = workers.length - mid; i < workers.length; i++) {
            availableWorkers.put(workers[i], availableWorkers.getOrDefault(workers[i], 0) + 1);
        }

        int pillsLeft = pills;

        for (int i = mid - 1; i >= 0; i--) {
            int task = tasks[i];
            Integer worker = availableWorkers.ceilingKey(task);

            if (worker != null) {
                removeWorker(availableWorkers, worker);
            } else if (pillsLeft > 0) {
                worker = availableWorkers.ceilingKey(task - strength);
                if (worker == null)
                    return false;
                removeWorker(availableWorkers, worker);
                pillsLeft--;
            } else
                return false;
        }
        return true;
    }

    private void removeWorker(TreeMap<Integer, Integer> map, int key) {
        if (map.get(key) == 1) {
            map.remove(key);
        } else {
            map.put(key, map.get(key) - 1);
        }
    }
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);

        int left = 0, right = Math.min(tasks.length, workers.length), ans = 0;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canAssign(tasks, workers, pills, strength, mid)) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ans;
    }
}
